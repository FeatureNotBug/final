Group members: Krzysztof Hochlewicz, Kaizen Castanos, Bi Ling Wu

Project: TerminalTyper (name subject to chance)

Summary: A terminal-based C clone of the online game TypeRacer (see http://play.typeracer.com ) which can be played by two or more people, simultaneously, on computers on the same local network.


User interface: The user interface will consist of two main parts.
	The first part, at the top of the window/screen, will display the current player's progress along with the progress of all the other players, very similar to how the cars are displayed on TypeRacer. 
	We'll likely just use text to display this, as such:

Welcome, Player 1!
Player 1: Start|-------------o~o>----------|Finish
Player 2: Start|-----o~o>------------------|Finish
Player 3: Start|-------------------o~o>----|Finish

	The second part will be the words that the player is supposed to type. 
	Using text of different color in terminal, we'll show which words the player entered correctly (probably green), 
	which ones they entered incorrectly (probably red) and which one they're currently on (probably... blue?).

The player will have to type the words in order as fast as possible, without any typos, and press "enter" or "space" after every word (haven't decided which yet)
Their "car" will advance for every word enered correctly. Words that they enter incorrectly will simply be marked red and the player will recieve no credit for them (or worse, be moved backwards).

Ideally, everything would happen inside one terminal window, and this is what we'll try to do. 
However, we recognize that this could prove to be rather difficult since parts of the window would need to update while the user is entering text, without clearing what the user has already entered. 
If this proves to be too difficult, we will split the game into two terminal windows, one for each of the two "parts" noted above. 
One will display the progress (which will often need to refresh as the player is entering text) and the other will show the words the player has typed/is typing (which only needs to refresh after each time the player enters a word.


Technical design:
	For each new "match", the player hosting the match (always set as Player 1 in the match) will connect to one or more other computers of other players who also have the game open.
	The "host" will then open a file containing every word in the English language, parse over it and select 200-300 words at random (using rand seeded with /dev/urandom) to be used in the match.
	It will send these words to the other computers and the match will begin at the same time for everyone.
	
	Whenever a player enters a word correctly, their instance of the game will notify the "host", who will notify all other players and update it on Player 1's screen.
	
	Group members' responsibilities: (subject to change)
		Krzsyztof: part of UI and part of networking
		Kaizen: UI
		Bi Ling: Networking
	
