#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>


int main() {

  int socket_id, socket_client, con_id;
  
  //create the socket
  socket_id = socket( AF_INET, SOCK_STREAM, 0 );
  
  //bind to port/address
  struct sockaddr_in listener;
  listener.sin_family = AF_INET;  //socket type IPv4
  listener.sin_port = htons(24601); //port #
  listener.sin_addr.s_addr = INADDR_ANY; //bind to any incoming address
  bind(socket_id, (struct sockaddr *)&listener, sizeof(listener));
  
  listen( socket_id, 1 );
  
for ( ; ; ) {

   connfd = accept(listenfd, ...); /* blocking call */

   if ( (pid = fork()) == 0 ) {

      close(listenfd); /* child closes listening socket */

      /***process the request doing something using connfd ***/
      /* ................. */

      close(connfd);
      exit(0);  /* child terminates
    }
    close(connfd);  /*parent closes connected socket*/
}
  /*
  printf("<server> listening\n");

  //we should probably fork here
  socket_client = accept( socket_id, NULL, NULL );
  printf("<server> connected: %d\n", socket_client );

  write( socket_client, "hello", 6 );
  
  return 0;
  */
}


/*
listenfd = soket_id
connfd = con_id
for ( ; ; ) {

   connfd = accept(listenfd, ...); blocking call 

   if ( (pid = fork()) == 0 ) {

      close(listenfd); child closes listening socket 

      *process the request doing something using connfd *
       .................

      close(connfd);
      exit(0);  child terminates
    }
    close(connfd);  parent closes connected socket
}
*/
